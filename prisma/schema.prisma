// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  nickname String?
  email String? @unique
  emailVerified DateTime? @default(now())
  phone String?
  phoneVerified DateTime?
  image String?
  newImage String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteRentIds String[] @db.ObjectId
  favoriteRoommateIds String[] @db.ObjectId
  favoriteBuySellIds String[] @db.ObjectId
  kakaoId String?
  jobLocation String?
  status String?
  
  accounts Account[]
  rentlistings RentListing[]
  roommatelistings RoommateListing[]
  buyselllistings BuySellListing[]
  bloglistings BlogListing[]
  reviews Review[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  refresh_token_expires_in Int?
  access_token String? @db.String
  accessTokenExpires DateTime?
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

}

model RentListing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  buildingId String @db.ObjectId
  category String
  title String
  bedCount String
  bathCount String
  price Int
  description String
  address String
  unit String
  imageSrc String[]
  moveDate String
  length String
  utility String
  broker String
  createdAt DateTime @default(now())
  updatedAt String
  amenity String[]
  feature String[]
  contact String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model RoommateListing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  category String
  roomtype  String
  price  Int
  length  String
  movedate  String
  description  String
  selfgender  String
  selfage  String
  selfstatus  String
  selfpet  String
  selfsmoke  String
  selfmbti  String
  rmgender  String
  rmage  String
  rmstatus  String
  rmpet  String
  rmsmoke  String
  city  String
  district  String
  contact String[]

  
  createdAt DateTime @default(now())
  updatedAt String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BuySellListing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  category String
  subcategory String
  title String
  price Int
  status String
  description String
  pictures String[]
  address String
  contact String[]
  coordinate Float[]
  
  createdAt DateTime @default(now())
  updatedAt String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model BlogListing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  category String
  title String
  content String
  thumbnail String
  hot String
  author String
  authorPic String
  
  createdAt DateTime @default(now())
  updatedAt String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Building {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  company String
  address String
  coordinate Float[]
  neighborhoodOne String
  neighborhoodTwo String
  subwayOneKm String[]

  subway BuildingToSubway[]
  reviews Review[]
  rentlisting RentListing[]
}


model BuildingToSubway {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  buildingId String @db.ObjectId
  name   String
  distance Float
  lines String[]

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  buildingId String @db.ObjectId
  buildingRate Int
  buildingReview String
  safeRate Int
  safeReview String
  transportationRate Int
  transportationReview String
  convenienceRate Int
  convenienceReview String

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Subway {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  station String
  lines String[]
}

model Zip {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  zipcode String
  neighborhood String
  city String
}